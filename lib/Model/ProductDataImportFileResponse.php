<?php
/**
 * ProductDataImportFileResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.9.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cbdesk\Kauflandv2\Api\Model;

use \ArrayAccess;
use \Cbdesk\Kauflandv2\Api\ObjectSerializer;

/**
 * ProductDataImportFileResponse Class Doc Comment
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductDataImportFileResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductDataImportFileResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_import_file' => 'int',
'uri' => 'string',
'status' => '\Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileStatus',
'note' => 'string',
'total_lines' => 'double',
'current_line' => 'double',
'ts_created' => 'string',
'ts_updated' => 'string',
'ts_last_row_updated' => 'string',
'ts_completed' => 'string',
'error_count' => 'double',
'async_import_done' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_import_file' => 'int64',
'uri' => null,
'status' => null,
'note' => null,
'total_lines' => 'double',
'current_line' => 'double',
'ts_created' => null,
'ts_updated' => null,
'ts_last_row_updated' => null,
'ts_completed' => null,
'error_count' => 'double',
'async_import_done' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_import_file' => 'id_import_file',
'uri' => 'uri',
'status' => 'status',
'note' => 'note',
'total_lines' => 'total_lines',
'current_line' => 'current_line',
'ts_created' => 'ts_created',
'ts_updated' => 'ts_updated',
'ts_last_row_updated' => 'ts_last_row_updated',
'ts_completed' => 'ts_completed',
'error_count' => 'error_count',
'async_import_done' => 'async_import_done'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_import_file' => 'setIdImportFile',
'uri' => 'setUri',
'status' => 'setStatus',
'note' => 'setNote',
'total_lines' => 'setTotalLines',
'current_line' => 'setCurrentLine',
'ts_created' => 'setTsCreated',
'ts_updated' => 'setTsUpdated',
'ts_last_row_updated' => 'setTsLastRowUpdated',
'ts_completed' => 'setTsCompleted',
'error_count' => 'setErrorCount',
'async_import_done' => 'setAsyncImportDone'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_import_file' => 'getIdImportFile',
'uri' => 'getUri',
'status' => 'getStatus',
'note' => 'getNote',
'total_lines' => 'getTotalLines',
'current_line' => 'getCurrentLine',
'ts_created' => 'getTsCreated',
'ts_updated' => 'getTsUpdated',
'ts_last_row_updated' => 'getTsLastRowUpdated',
'ts_completed' => 'getTsCompleted',
'error_count' => 'getErrorCount',
'async_import_done' => 'getAsyncImportDone'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_import_file'] = isset($data['id_import_file']) ? $data['id_import_file'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['total_lines'] = isset($data['total_lines']) ? $data['total_lines'] : null;
        $this->container['current_line'] = isset($data['current_line']) ? $data['current_line'] : null;
        $this->container['ts_created'] = isset($data['ts_created']) ? $data['ts_created'] : null;
        $this->container['ts_updated'] = isset($data['ts_updated']) ? $data['ts_updated'] : null;
        $this->container['ts_last_row_updated'] = isset($data['ts_last_row_updated']) ? $data['ts_last_row_updated'] : null;
        $this->container['ts_completed'] = isset($data['ts_completed']) ? $data['ts_completed'] : null;
        $this->container['error_count'] = isset($data['error_count']) ? $data['error_count'] : null;
        $this->container['async_import_done'] = isset($data['async_import_done']) ? $data['async_import_done'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id_import_file'] === null) {
            $invalidProperties[] = "'id_import_file' can't be null";
        }
        if ($this->container['uri'] === null) {
            $invalidProperties[] = "'uri' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['total_lines'] === null) {
            $invalidProperties[] = "'total_lines' can't be null";
        }
        if ($this->container['current_line'] === null) {
            $invalidProperties[] = "'current_line' can't be null";
        }
        if ($this->container['ts_created'] === null) {
            $invalidProperties[] = "'ts_created' can't be null";
        }
        if ($this->container['ts_updated'] === null) {
            $invalidProperties[] = "'ts_updated' can't be null";
        }
        if ($this->container['ts_last_row_updated'] === null) {
            $invalidProperties[] = "'ts_last_row_updated' can't be null";
        }
        if ($this->container['ts_completed'] === null) {
            $invalidProperties[] = "'ts_completed' can't be null";
        }
        if ($this->container['error_count'] === null) {
            $invalidProperties[] = "'error_count' can't be null";
        }
        if ($this->container['async_import_done'] === null) {
            $invalidProperties[] = "'async_import_done' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_import_file
     *
     * @return int
     */
    public function getIdImportFile()
    {
        return $this->container['id_import_file'];
    }

    /**
     * Sets id_import_file
     *
     * @param int $id_import_file id_import_file
     *
     * @return $this
     */
    public function setIdImportFile($id_import_file)
    {
        $this->container['id_import_file'] = $id_import_file;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri uri
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Cbdesk\Kauflandv2\Api\Model\ProductDataImportFileStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets total_lines
     *
     * @return double
     */
    public function getTotalLines()
    {
        return $this->container['total_lines'];
    }

    /**
     * Sets total_lines
     *
     * @param double $total_lines total_lines
     *
     * @return $this
     */
    public function setTotalLines($total_lines)
    {
        $this->container['total_lines'] = $total_lines;

        return $this;
    }

    /**
     * Gets current_line
     *
     * @return double
     */
    public function getCurrentLine()
    {
        return $this->container['current_line'];
    }

    /**
     * Sets current_line
     *
     * @param double $current_line current_line
     *
     * @return $this
     */
    public function setCurrentLine($current_line)
    {
        $this->container['current_line'] = $current_line;

        return $this;
    }

    /**
     * Gets ts_created
     *
     * @return string
     */
    public function getTsCreated()
    {
        return $this->container['ts_created'];
    }

    /**
     * Sets ts_created
     *
     * @param string $ts_created ts_created
     *
     * @return $this
     */
    public function setTsCreated($ts_created)
    {
        $this->container['ts_created'] = $ts_created;

        return $this;
    }

    /**
     * Gets ts_updated
     *
     * @return string
     */
    public function getTsUpdated()
    {
        return $this->container['ts_updated'];
    }

    /**
     * Sets ts_updated
     *
     * @param string $ts_updated ts_updated
     *
     * @return $this
     */
    public function setTsUpdated($ts_updated)
    {
        $this->container['ts_updated'] = $ts_updated;

        return $this;
    }

    /**
     * Gets ts_last_row_updated
     *
     * @return string
     */
    public function getTsLastRowUpdated()
    {
        return $this->container['ts_last_row_updated'];
    }

    /**
     * Sets ts_last_row_updated
     *
     * @param string $ts_last_row_updated ts_last_row_updated
     *
     * @return $this
     */
    public function setTsLastRowUpdated($ts_last_row_updated)
    {
        $this->container['ts_last_row_updated'] = $ts_last_row_updated;

        return $this;
    }

    /**
     * Gets ts_completed
     *
     * @return string
     */
    public function getTsCompleted()
    {
        return $this->container['ts_completed'];
    }

    /**
     * Sets ts_completed
     *
     * @param string $ts_completed ts_completed
     *
     * @return $this
     */
    public function setTsCompleted($ts_completed)
    {
        $this->container['ts_completed'] = $ts_completed;

        return $this;
    }

    /**
     * Gets error_count
     *
     * @return double
     */
    public function getErrorCount()
    {
        return $this->container['error_count'];
    }

    /**
     * Sets error_count
     *
     * @param double $error_count error_count
     *
     * @return $this
     */
    public function setErrorCount($error_count)
    {
        $this->container['error_count'] = $error_count;

        return $this;
    }

    /**
     * Gets async_import_done
     *
     * @return double
     */
    public function getAsyncImportDone()
    {
        return $this->container['async_import_done'];
    }

    /**
     * Sets async_import_done
     *
     * @param double $async_import_done async_import_done
     *
     * @return $this
     */
    public function setAsyncImportDone($async_import_done)
    {
        $this->container['async_import_done'] = $async_import_done;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
