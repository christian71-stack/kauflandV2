<?php
/**
 * TicketMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.9.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cbdesk\Kauflandv2\Api\Model;

use \ArrayAccess;
use \Cbdesk\Kauflandv2\Api\ObjectSerializer;

/**
 * TicketMessage Class Doc Comment
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TicketMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TicketMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_ticket_message' => '\Cbdesk\Kauflandv2\Api\Model\LongInteger',
'id_ticket' => '\Cbdesk\Kauflandv2\Api\Model\TicketID',
'author' => '\Cbdesk\Kauflandv2\Api\Model\TicketMessageAuthor',
'text' => 'string',
'ts_created_iso' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_ticket_message' => null,
'id_ticket' => null,
'author' => null,
'text' => null,
'ts_created_iso' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_ticket_message' => 'id_ticket_message',
'id_ticket' => 'id_ticket',
'author' => 'author',
'text' => 'text',
'ts_created_iso' => 'ts_created_iso'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_ticket_message' => 'setIdTicketMessage',
'id_ticket' => 'setIdTicket',
'author' => 'setAuthor',
'text' => 'setText',
'ts_created_iso' => 'setTsCreatedIso'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_ticket_message' => 'getIdTicketMessage',
'id_ticket' => 'getIdTicket',
'author' => 'getAuthor',
'text' => 'getText',
'ts_created_iso' => 'getTsCreatedIso'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_ticket_message'] = isset($data['id_ticket_message']) ? $data['id_ticket_message'] : null;
        $this->container['id_ticket'] = isset($data['id_ticket']) ? $data['id_ticket'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['ts_created_iso'] = isset($data['ts_created_iso']) ? $data['ts_created_iso'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id_ticket_message'] === null) {
            $invalidProperties[] = "'id_ticket_message' can't be null";
        }
        if ($this->container['id_ticket'] === null) {
            $invalidProperties[] = "'id_ticket' can't be null";
        }
        if ($this->container['author'] === null) {
            $invalidProperties[] = "'author' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['ts_created_iso'] === null) {
            $invalidProperties[] = "'ts_created_iso' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_ticket_message
     *
     * @return \Cbdesk\Kauflandv2\Api\Model\LongInteger
     */
    public function getIdTicketMessage()
    {
        return $this->container['id_ticket_message'];
    }

    /**
     * Sets id_ticket_message
     *
     * @param \Cbdesk\Kauflandv2\Api\Model\LongInteger $id_ticket_message id_ticket_message
     *
     * @return $this
     */
    public function setIdTicketMessage($id_ticket_message)
    {
        $this->container['id_ticket_message'] = $id_ticket_message;

        return $this;
    }

    /**
     * Gets id_ticket
     *
     * @return \Cbdesk\Kauflandv2\Api\Model\TicketID
     */
    public function getIdTicket()
    {
        return $this->container['id_ticket'];
    }

    /**
     * Sets id_ticket
     *
     * @param \Cbdesk\Kauflandv2\Api\Model\TicketID $id_ticket id_ticket
     *
     * @return $this
     */
    public function setIdTicket($id_ticket)
    {
        $this->container['id_ticket'] = $id_ticket;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \Cbdesk\Kauflandv2\Api\Model\TicketMessageAuthor
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \Cbdesk\Kauflandv2\Api\Model\TicketMessageAuthor $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text The content of the message
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets ts_created_iso
     *
     * @return string
     */
    public function getTsCreatedIso()
    {
        return $this->container['ts_created_iso'];
    }

    /**
     * Sets ts_created_iso
     *
     * @param string $ts_created_iso Creation date of the message in iso 8601
     *
     * @return $this
     */
    public function setTsCreatedIso($ts_created_iso)
    {
        $this->container['ts_created_iso'] = $ts_created_iso;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
