<?php
/**
 * ProductDataStatusResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * OpenAPI spec version: 2.9.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cbdesk\Kauflandv2\Api\Model;

use \ArrayAccess;
use \Cbdesk\Kauflandv2\Api\ObjectSerializer;

/**
 * ProductDataStatusResponse Class Doc Comment
 *
 * @category Class
 * @package  Cbdesk\Kauflandv2\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductDataStatusResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductDataStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_ready' => 'bool',
'update_status' => '\Cbdesk\Kauflandv2\Api\Model\ProductDataStatus',
'id_product' => 'int',
'product_not_ready_reason' => 'AllOfProductDataStatusResponseProductNotReadyReason',
'update_fail_reason' => 'AllOfProductDataStatusResponseUpdateFailReason',
'attribute_values' => '\Cbdesk\Kauflandv2\Api\Model\ProductDataStatusAttribute[]',
'missing_attributes' => 'string[]',
'min_one_missing_attributes' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_ready' => null,
'update_status' => null,
'id_product' => 'int64',
'product_not_ready_reason' => null,
'update_fail_reason' => null,
'attribute_values' => null,
'missing_attributes' => null,
'min_one_missing_attributes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_ready' => 'product_ready',
'update_status' => 'update_status',
'id_product' => 'id_product',
'product_not_ready_reason' => 'product_not_ready_reason',
'update_fail_reason' => 'update_fail_reason',
'attribute_values' => 'attribute_values',
'missing_attributes' => 'missing_attributes',
'min_one_missing_attributes' => 'min_one_missing_attributes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_ready' => 'setProductReady',
'update_status' => 'setUpdateStatus',
'id_product' => 'setIdProduct',
'product_not_ready_reason' => 'setProductNotReadyReason',
'update_fail_reason' => 'setUpdateFailReason',
'attribute_values' => 'setAttributeValues',
'missing_attributes' => 'setMissingAttributes',
'min_one_missing_attributes' => 'setMinOneMissingAttributes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_ready' => 'getProductReady',
'update_status' => 'getUpdateStatus',
'id_product' => 'getIdProduct',
'product_not_ready_reason' => 'getProductNotReadyReason',
'update_fail_reason' => 'getUpdateFailReason',
'attribute_values' => 'getAttributeValues',
'missing_attributes' => 'getMissingAttributes',
'min_one_missing_attributes' => 'getMinOneMissingAttributes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_ready'] = isset($data['product_ready']) ? $data['product_ready'] : null;
        $this->container['update_status'] = isset($data['update_status']) ? $data['update_status'] : null;
        $this->container['id_product'] = isset($data['id_product']) ? $data['id_product'] : null;
        $this->container['product_not_ready_reason'] = isset($data['product_not_ready_reason']) ? $data['product_not_ready_reason'] : null;
        $this->container['update_fail_reason'] = isset($data['update_fail_reason']) ? $data['update_fail_reason'] : null;
        $this->container['attribute_values'] = isset($data['attribute_values']) ? $data['attribute_values'] : null;
        $this->container['missing_attributes'] = isset($data['missing_attributes']) ? $data['missing_attributes'] : null;
        $this->container['min_one_missing_attributes'] = isset($data['min_one_missing_attributes']) ? $data['min_one_missing_attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_ready'] === null) {
            $invalidProperties[] = "'product_ready' can't be null";
        }
        if ($this->container['update_status'] === null) {
            $invalidProperties[] = "'update_status' can't be null";
        }
        if ($this->container['id_product'] === null) {
            $invalidProperties[] = "'id_product' can't be null";
        }
        if ($this->container['product_not_ready_reason'] === null) {
            $invalidProperties[] = "'product_not_ready_reason' can't be null";
        }
        if ($this->container['update_fail_reason'] === null) {
            $invalidProperties[] = "'update_fail_reason' can't be null";
        }
        if ($this->container['attribute_values'] === null) {
            $invalidProperties[] = "'attribute_values' can't be null";
        }
        if ($this->container['missing_attributes'] === null) {
            $invalidProperties[] = "'missing_attributes' can't be null";
        }
        if ($this->container['min_one_missing_attributes'] === null) {
            $invalidProperties[] = "'min_one_missing_attributes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_ready
     *
     * @return bool
     */
    public function getProductReady()
    {
        return $this->container['product_ready'];
    }

    /**
     * Sets product_ready
     *
     * @param bool $product_ready product_ready
     *
     * @return $this
     */
    public function setProductReady($product_ready)
    {
        $this->container['product_ready'] = $product_ready;

        return $this;
    }

    /**
     * Gets update_status
     *
     * @return \Cbdesk\Kauflandv2\Api\Model\ProductDataStatus
     */
    public function getUpdateStatus()
    {
        return $this->container['update_status'];
    }

    /**
     * Sets update_status
     *
     * @param \Cbdesk\Kauflandv2\Api\Model\ProductDataStatus $update_status update_status
     *
     * @return $this
     */
    public function setUpdateStatus($update_status)
    {
        $this->container['update_status'] = $update_status;

        return $this;
    }

    /**
     * Gets id_product
     *
     * @return int
     */
    public function getIdProduct()
    {
        return $this->container['id_product'];
    }

    /**
     * Sets id_product
     *
     * @param int $id_product id_product
     *
     * @return $this
     */
    public function setIdProduct($id_product)
    {
        $this->container['id_product'] = $id_product;

        return $this;
    }

    /**
     * Gets product_not_ready_reason
     *
     * @return AllOfProductDataStatusResponseProductNotReadyReason
     */
    public function getProductNotReadyReason()
    {
        return $this->container['product_not_ready_reason'];
    }

    /**
     * Sets product_not_ready_reason
     *
     * @param AllOfProductDataStatusResponseProductNotReadyReason $product_not_ready_reason product_not_ready_reason
     *
     * @return $this
     */
    public function setProductNotReadyReason($product_not_ready_reason)
    {
        $this->container['product_not_ready_reason'] = $product_not_ready_reason;

        return $this;
    }

    /**
     * Gets update_fail_reason
     *
     * @return AllOfProductDataStatusResponseUpdateFailReason
     */
    public function getUpdateFailReason()
    {
        return $this->container['update_fail_reason'];
    }

    /**
     * Sets update_fail_reason
     *
     * @param AllOfProductDataStatusResponseUpdateFailReason $update_fail_reason update_fail_reason
     *
     * @return $this
     */
    public function setUpdateFailReason($update_fail_reason)
    {
        $this->container['update_fail_reason'] = $update_fail_reason;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return \Cbdesk\Kauflandv2\Api\Model\ProductDataStatusAttribute[]
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param \Cbdesk\Kauflandv2\Api\Model\ProductDataStatusAttribute[] $attribute_values attribute_values
     *
     * @return $this
     */
    public function setAttributeValues($attribute_values)
    {
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets missing_attributes
     *
     * @return string[]
     */
    public function getMissingAttributes()
    {
        return $this->container['missing_attributes'];
    }

    /**
     * Sets missing_attributes
     *
     * @param string[] $missing_attributes missing_attributes
     *
     * @return $this
     */
    public function setMissingAttributes($missing_attributes)
    {
        $this->container['missing_attributes'] = $missing_attributes;

        return $this;
    }

    /**
     * Gets min_one_missing_attributes
     *
     * @return string[]
     */
    public function getMinOneMissingAttributes()
    {
        return $this->container['min_one_missing_attributes'];
    }

    /**
     * Sets min_one_missing_attributes
     *
     * @param string[] $min_one_missing_attributes min_one_missing_attributes
     *
     * @return $this
     */
    public function setMinOneMissingAttributes($min_one_missing_attributes)
    {
        $this->container['min_one_missing_attributes'] = $min_one_missing_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
